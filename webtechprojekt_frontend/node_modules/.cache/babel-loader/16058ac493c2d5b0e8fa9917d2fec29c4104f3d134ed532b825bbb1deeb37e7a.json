{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport { createStore } from 'vuex';\nimport axios from 'axios'; // Axios importieren\n\nexport default createStore({\n  state: {\n    isLoggedIn: false,\n    user: {},\n    /**\r\n     * In diesem Objekt, werden die User Eingaben gespeichert,\r\n     * alles wird vom User eingegeben, außer die IATA Codes, diese\r\n     * werden mittels API Call übergeben\r\n     */\n    userInputObject: {\n      departureAirport: \"\",\n      departureIata: \"\",\n      arrivalAirport: \"\",\n      arrivalIata: \"\",\n      departureDate: \"\",\n      traveller: 0\n    },\n    /**\r\n     * Die Flugdaten von Aviationstack werden hier gelagert\r\n     */\n    flightAPIcallData: [],\n    /**\r\n     * Die Autcomplete API Calls werden hier in arrival[] und departure[] gespeichert\r\n     */\n    autocompleteObject: {\n      arrivalAirport: [],\n      departureAirport: []\n    },\n    /**\r\n     * Objekt mit allen URLs\r\n     */\n    urlObject: {\n      autocompleteUrl: \"https://webtech-autocomplete.onrender.com/api/AirportRestAPI/municipality/\",\n      userUrl: \"https://usermanagementservice-v1-production.onrender.com/api/v1/auth\",\n      ticketsUrl: \"https://usermanagementservice-v1-production.onrender.com/api/v1/tickets\"\n    },\n    currentFlightDetailed: {},\n    ticketDbObject: {\n      name: \"\",\n      departure: \"\",\n      destination: \"\",\n      gate: \"\",\n      date: null,\n      seat: \"\",\n      boardingTime: null\n    },\n    registrationObject: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      city: \"\",\n      country: \"\",\n      phoneNumber: \"\",\n      adress: \"\",\n      postalCode: \"\",\n      gender: \"\"\n    },\n    ticketsList: [],\n    seatsList: [],\n    token: \"\",\n    ticketPrice: 0\n  },\n  getters: {},\n  mutations: {\n    setTicketPrice(state, price) {\n      state.ticketPrice = price;\n    },\n    setRegistrationObjectToObject(state, object) {\n      state.registrationObject = object;\n    },\n    setUser(state, userObject) {\n      state.user = userObject;\n    },\n    setIsLoggedInTrue(state) {\n      state.isLoggedIn = true;\n    },\n    setIsLoggedInFalse(state) {\n      state.isLoggedIn = false;\n    },\n    /**\r\n     * Setzt einen beliebigen Wert im `userInputObject`, sofern der Schlüssel existiert.\r\n     * @param {Object} state - Der aktuelle Vuex-Store-State.\r\n     * @param {Object} payload - Das Payload-Objekt mit `key` und `value`.\r\n     * @param {string} payload.key - Der Schlüssel im `userInputObject`, der gesetzt werden soll.\r\n     * @param {*} payload.value - Der neue Wert, der gesetzt werden soll.\r\n     * @throws {Error} Gibt eine Warnung in der Konsole aus, wenn der Schlüssel nicht im `userInputObject` existiert.\r\n     */\n    setUserInput(state, {\n      key,\n      value\n    }) {\n      if (state.userInputObject.hasOwnProperty(key)) {\n        state.userInputObject[key] = value;\n      } else {\n        console.warn(`Key \"${key}\" exists nicht im userInputObject.`);\n      }\n    },\n    removeFromSeatsList(state, {\n      seatId\n    }) {\n      state.seatsList = state.seatsList.filter(seat => seat.seatId !== seatId);\n      console.log(\"Die seatslists in store : \" + state.seatsList);\n    },\n    addToSeatsList(state, seatId) {\n      if (!state.seatsList.includes(seatId)) {\n        state.seatsList.push(seatId);\n      }\n    },\n    setTicketDbObject(state, {\n      key,\n      value\n    }) {\n      if (state.ticketDbObject.hasOwnProperty(key)) {\n        state.ticketDbObject[key] = value;\n      } else {\n        console.warn(`Key \"${key}\" exists nicht im ticketDbObject.`);\n      }\n    },\n    setRegistrationObject(state, {\n      key,\n      value\n    }) {\n      if (state.registrationObject.hasOwnProperty(key)) {\n        state.registrationObject[key] = value;\n      } else {\n        console.warn(`Key \"${key}\" exists nicht im registrationObject.`);\n      }\n    },\n    addTicketToList(state, ticket) {\n      if (ticket && typeof ticket === \"object\") {\n        state.ticketsList.push(ticket);\n      } else {\n        console.warn(\"Das hinzugefügte Ticket muss ein gültiges Objekt sein.\");\n      }\n    },\n    incrementTraveller(state) {\n      if (state.userInputObject.traveller <= 6) {\n        state.userInputObject.traveller += 1;\n      }\n    },\n    decrementTraveller(state) {\n      if (state.userInputObject.traveller > 1) {\n        state.userInputObject.traveller -= 1;\n      }\n    },\n    /**\r\n     * Aktualisiert den `aviationStackAPI`-State mit den von der API abgerufenen Daten.\r\n     * @param {Object} state - Der aktuelle Vuex-Store-State.\r\n     * @param {Array<Object>} data - Die von der API abgerufenen Flugdaten\r\n     **/\n    setAviationData(state, data) {\n      state.flightAPIcallData = data;\n    },\n    /**\r\n     * Setzt die Ankunftsflughäfen im `autocompleteObject`.\r\n     * @param {Array} airports - Ein Array von Flughäfen, das gesetzt werden soll.\r\n     */\n    setArrivalAirportsAutocomplete(state, airports) {\n      state.autocompleteObject.arrivalAirport = airports;\n    },\n    /**\r\n     * Setzt die Abflughäfen im `autocompleteObject`.\r\n     * @param {Array} airports - Ein Array von Flughäfen, das gesetzt werden soll.\r\n     */\n    setDepartureAirportsAutocomplete(state, airports) {\n      state.autocompleteObject.departureAirport = airports;\n    },\n    setCurrentFlightDetailed(state, flightDetails) {\n      state.currentFlightDetailed = flightDetails;\n    },\n    assignSeatsToTickets(state, seatList) {\n      if (!Array.isArray(state.ticketsList) || !Array.isArray(seatList)) {\n        console.warn(\"Sowohl `ticketsList` als auch `seatList` müssen Arrays sein.\");\n        return;\n      }\n      for (let i = 0; i < state.ticketsList.length; i++) {\n        if (i < seatList.length) {\n          state.ticketsList[i].seat = seatList[i];\n        } else {\n          console.warn(`Nicht genügend Sitzplätze in der Liste für Ticket ${i + 1}.`);\n          break; // Keine weiteren Sitzplätze verfügbar\n        }\n      }\n    },\n    setToken(state, token) {\n      state.token = token;\n    }\n  },\n  actions: {\n    async fetchArrivalAirportsAutocomplete({\n      commit,\n      state\n    }) {\n      console.log(\"Starte API-Anfrage...\");\n      const query = state.userInputObject.arrivalAirport.trim();\n      if (!query) {\n        console.log(\"Eingabe leer, Anfrage abgebrochen.\");\n        return;\n      }\n      try {\n        let url = state.urlObject.autocompleteUrl + state.userInputObject.arrivalAirport;\n        const response = await fetch(url, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP-Fehler! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        commit('setArrivalAirportsAutocomplete', data);\n        console.log(state.userInputObject);\n      } catch (error) {\n        console.error(\"Fehler bei der API-Anfrage:\", error);\n      }\n    },\n    /**a\r\n     * Asynchrone Action, die Flugdaten von einer API abruft und im Vuex-Store speichert.\r\n     * @throws {Error} Gibt Fehler in der Konsole aus, falls die Anfrage oder Antwort fehlschlägt.\r\n     * @description\r\n     * Diese Methode ruft Flugdaten von der API (https://jsonplaceholder.typicode.com/posts) ab, \r\n     * überprüft das Format der Antwort und speichert die Daten im Vuex-Store. \r\n     * Bei Fehlern wird eine Fehlermeldung in der Konsole angezeigt.\r\n     */\n    async fetchAviationData({\n      commit,\n      state\n    }) {\n      try {\n        /** \r\n        const response = await fetch(state.urlObject.aviationStackUrl);\r\n        */\n        console.log(state.userInputObject);\n        console.log(\"hallo\");\n        const response = await axios.get(\"https://api.aviationstack.com/v1/flights\", {\n          params: {\n            access_key: \"b4a0acc6168e874cc4b1e80e105d4f82\",\n            dep_iata: state.userInputObject.departureIata,\n            arr_iata: state.userInputObject.arrivalIata\n          }\n        });\n        console.log(\"anfrage geschikct\");\n        console.log(response);\n        const data = response.data.data;\n        console.log(data);\n\n        // Überprüfen, ob die API-Daten erfolgreich abgerufen wurden\n        if (data) {\n          console.log(\"Api Call erfolgreich\", data);\n          commit('setAviationData', data);\n          console.log(state.userInputObject);\n          console.log(\"Flight API DATA .data :\" + response.data);\n          console.log(\"Flight API DATA :\" + state.flightAPIcallData);\n        } else {\n          console.error('Fehlerhafte API-Antwort:', data);\n        }\n      } catch (error) {\n        console.error('Fehler bei der API-Anfrage:', error);\n      }\n    },\n    async fetchDepartureAirportsAutocomplete({\n      commit,\n      state\n    }) {\n      console.log(\"Starte API-Anfrage...\");\n      const query = state.userInputObject.departureAirport.trim();\n      if (!query) {\n        console.log(\"Eingabe leer, Anfrage abgebrochen.\");\n        return;\n      }\n      try {\n        let url = state.urlObject.autocompleteUrl + state.userInputObject.departureAirport;\n        const response = await fetch(url, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP-Fehler! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        commit('setDepartureAirportsAutocomplete', data);\n      } catch (error) {\n        console.error(\"Fehler bei der API-Anfrage:\", error);\n      }\n    },\n    async loginAccount({\n      commit,\n      state\n    }, {\n      emailUser,\n      passwordUser\n    }) {\n      try {\n        const url = `${state.urlObject.userUrl}/signin`;\n        const requestData = {\n          email: emailUser,\n          password: passwordUser\n        };\n        const response = await fetch(url, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(requestData)\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP-Fehler! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        const token = data.token;\n        commit('setToken', token);\n        localStorage.setItem('auth_token', token);\n        localStorage.setItem('email', emailUser);\n        commit(\"setIsLoggedInTrue\");\n        console.log(token);\n      } catch (error) {\n        console.error(\"Fehler bei der API-Anfrage:\", error);\n      }\n    },\n    async updateAccount({\n      commit,\n      state\n    }) {\n      try {\n        const request = {\n          user: state.user,\n          token: localStorage.getItem(\"auth_token\")\n        };\n        console.log(request);\n        const url = `${state.urlObject.userUrl}/users`;\n        const response = await fetch(url, {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${request.token}`\n          },\n          body: JSON.stringify(request) // Die Benutzerdaten als JSON im Request-Body übermitteln\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP-Fehler! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        commit('setUser', data); // Die Antwort von der API wird in den Store gespeichert\n      } catch (error) {\n        console.error(\"Fehler bei der API-Anfrage:\", error);\n      }\n    },\n    async createAccount({\n      commit,\n      state\n    }) {\n      try {\n        const url = `${state.urlObject.userUrl}/signup`;\n        const user = state.registrationObject;\n        console.log(url);\n        const response = await fetch(url, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            user\n          }) // Die Benutzerdaten als JSON im Request-Body übermitteln\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP-Fehler! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        commit('setUser', data.user); // Die Antwort von der API wird in den Store gespeichert\n      } catch (error) {\n        console.error(\"Fehler bei der API-Anfrage:\", error);\n      }\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["createStore","axios","state","isLoggedIn","user","userInputObject","departureAirport","departureIata","arrivalAirport","arrivalIata","departureDate","traveller","flightAPIcallData","autocompleteObject","urlObject","autocompleteUrl","userUrl","ticketsUrl","currentFlightDetailed","ticketDbObject","name","departure","destination","gate","date","seat","boardingTime","registrationObject","firstName","lastName","email","password","city","country","phoneNumber","adress","postalCode","gender","ticketsList","seatsList","token","ticketPrice","getters","mutations","setTicketPrice","price","setRegistrationObjectToObject","object","setUser","userObject","setIsLoggedInTrue","setIsLoggedInFalse","setUserInput","key","value","hasOwnProperty","console","warn","removeFromSeatsList","seatId","filter","log","addToSeatsList","includes","push","setTicketDbObject","setRegistrationObject","addTicketToList","ticket","incrementTraveller","decrementTraveller","setAviationData","data","setArrivalAirportsAutocomplete","airports","setDepartureAirportsAutocomplete","setCurrentFlightDetailed","flightDetails","assignSeatsToTickets","seatList","Array","isArray","i","length","setToken","actions","fetchArrivalAirportsAutocomplete","commit","query","trim","url","response","fetch","method","headers","ok","Error","status","json","error","fetchAviationData","get","params","access_key","dep_iata","arr_iata","fetchDepartureAirportsAutocomplete","loginAccount","emailUser","passwordUser","requestData","body","JSON","stringify","localStorage","setItem","updateAccount","request","getItem","Authorization","createAccount","modules"],"sources":["C:/Users/DUNG/WebTechProject_Frontend/webtechprojekt_frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\r\nimport axios from 'axios'; // Axios importieren\r\n\r\nexport default createStore({\r\n  state: { \r\n    \r\n    \r\n    \r\n    isLoggedIn:false,\r\n\r\n    user: {\r\n    },\r\n\r\n    /**\r\n     * In diesem Objekt, werden die User Eingaben gespeichert,\r\n     * alles wird vom User eingegeben, außer die IATA Codes, diese\r\n     * werden mittels API Call übergeben\r\n     */\r\n    userInputObject:{\r\n      departureAirport:\"\",\r\n      departureIata:\"\",\r\n      arrivalAirport:\"\",\r\n      arrivalIata:\"\",\r\n      departureDate:\"\",\r\n      traveller: 0\r\n    },\r\n\r\n    /**\r\n     * Die Flugdaten von Aviationstack werden hier gelagert\r\n     */\r\n    flightAPIcallData :[],\r\n\r\n    /**\r\n     * Die Autcomplete API Calls werden hier in arrival[] und departure[] gespeichert\r\n     */\r\n    autocompleteObject:{\r\n      arrivalAirport:[],\r\n      departureAirport:[]\r\n    },\r\n\r\n    /**\r\n     * Objekt mit allen URLs\r\n     */\r\n    urlObject:{\r\n      autocompleteUrl: \"https://webtech-autocomplete.onrender.com/api/AirportRestAPI/municipality/\",\r\n      userUrl: \"https://usermanagementservice-v1-production.onrender.com/api/v1/auth\",\r\n      ticketsUrl: \"https://usermanagementservice-v1-production.onrender.com/api/v1/tickets\"\r\n\r\n    },\r\n\r\n    currentFlightDetailed:{},\r\n\r\n    ticketDbObject:{\r\n        name: \"\",\r\n        departure:\"\",\r\n        destination:\"\",\r\n        gate:\"\",\r\n        date:null,\r\n        seat: \"\",\r\n        boardingTime:null\r\n    },\r\n\r\n    registrationObject:{\r\n      firstName:\"\",\r\n      lastName:\"\",\r\n      email:\"\",\r\n      password:\"\",\r\n      city:\"\",\r\n      country:\"\",\r\n      phoneNumber:\"\",\r\n      adress:\"\",\r\n      postalCode:\"\",\r\n      gender :\"\"\r\n    },\r\n\r\n    ticketsList:[],\r\n    seatsList:[],\r\n    token:\"\",\r\n    ticketPrice:0\r\n\r\n  },\r\n  getters: {\r\n\r\n  },\r\n  mutations: {\r\n    setTicketPrice(state, price) { \r\n      state.ticketPrice = price\r\n      },\r\n    setRegistrationObjectToObject(state, object) { \r\n      state.registrationObject = object\r\n      },\r\n    setUser(state,userObject){\r\n    state.user = userObject\r\n    }\r\n    ,\r\n    setIsLoggedInTrue(state){\r\n      state.isLoggedIn = true\r\n    },\r\n    setIsLoggedInFalse(state){\r\n      state.isLoggedIn = false\r\n    },\r\n\r\n\r\n    /**\r\n     * Setzt einen beliebigen Wert im `userInputObject`, sofern der Schlüssel existiert.\r\n     * @param {Object} state - Der aktuelle Vuex-Store-State.\r\n     * @param {Object} payload - Das Payload-Objekt mit `key` und `value`.\r\n     * @param {string} payload.key - Der Schlüssel im `userInputObject`, der gesetzt werden soll.\r\n     * @param {*} payload.value - Der neue Wert, der gesetzt werden soll.\r\n     * @throws {Error} Gibt eine Warnung in der Konsole aus, wenn der Schlüssel nicht im `userInputObject` existiert.\r\n     */\r\n    setUserInput(state, { key, value }) { \r\n      if (state.userInputObject.hasOwnProperty(key)) {\r\n        state.userInputObject[key] = value;\r\n      } else {\r\n        console.warn(`Key \"${key}\" exists nicht im userInputObject.`);\r\n      }\r\n    },  removeFromSeatsList(state, { seatId }) {\r\n      state.seatsList = state.seatsList.filter(seat => seat.seatId !== seatId);\r\n      console.log(\"Die seatslists in store : \" +state.seatsList)\r\n    }, \r\n    addToSeatsList(state, seatId) {\r\n      if (!state.seatsList.includes(seatId)) {\r\n          state.seatsList.push(seatId);\r\n      }\r\n  },\r\n    setTicketDbObject(state, { key, value }) { \r\n      if (state.ticketDbObject.hasOwnProperty(key)) {\r\n        state.ticketDbObject[key] = value;\r\n      } else {\r\n        console.warn(`Key \"${key}\" exists nicht im ticketDbObject.`);\r\n      }\r\n\r\n    },setRegistrationObject(state, { key, value }) { \r\n      if (state.registrationObject.hasOwnProperty(key)) {\r\n        state.registrationObject[key] = value;\r\n      } else {\r\n        console.warn(`Key \"${key}\" exists nicht im registrationObject.`);\r\n      }\r\n    },\r\n\r\n    addTicketToList(state, ticket) {\r\n      if (ticket && typeof ticket === \"object\") {\r\n        state.ticketsList.push(ticket);\r\n      } else {\r\n        console.warn(\"Das hinzugefügte Ticket muss ein gültiges Objekt sein.\");\r\n      }\r\n    },\r\n\r\n    incrementTraveller(state) {\r\n      if(state.userInputObject.traveller<=6){\r\n        state.userInputObject.traveller += 1;\r\n      }\r\n      \r\n    },\r\n    decrementTraveller(state) {\r\n      if (state.userInputObject.traveller > 1) {\r\n        state.userInputObject.traveller -= 1;\r\n      }\r\n    },\r\n\r\n   \r\n\r\n    /**\r\n     * Aktualisiert den `aviationStackAPI`-State mit den von der API abgerufenen Daten.\r\n     * @param {Object} state - Der aktuelle Vuex-Store-State.\r\n     * @param {Array<Object>} data - Die von der API abgerufenen Flugdaten\r\n     **/\r\n    setAviationData(state, data) {\r\n      state.flightAPIcallData = data; \r\n    },\r\n\r\n    /**\r\n     * Setzt die Ankunftsflughäfen im `autocompleteObject`.\r\n     * @param {Array} airports - Ein Array von Flughäfen, das gesetzt werden soll.\r\n     */\r\n    setArrivalAirportsAutocomplete(state,airports) {\r\n\r\n        state.autocompleteObject.arrivalAirport = airports;\r\n      \r\n    },\r\n\r\n    /**\r\n     * Setzt die Abflughäfen im `autocompleteObject`.\r\n     * @param {Array} airports - Ein Array von Flughäfen, das gesetzt werden soll.\r\n     */\r\n    setDepartureAirportsAutocomplete(state,airports) {\r\n        state.autocompleteObject.departureAirport = airports;\r\n      \r\n    },\r\n    setCurrentFlightDetailed(state, flightDetails) {\r\n      state.currentFlightDetailed = flightDetails;\r\n  },\r\n  assignSeatsToTickets(state, seatList) {\r\n    if (!Array.isArray(state.ticketsList) || !Array.isArray(seatList)) {\r\n      console.warn(\"Sowohl `ticketsList` als auch `seatList` müssen Arrays sein.\");\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < state.ticketsList.length; i++) {\r\n      if (i < seatList.length) {\r\n        state.ticketsList[i].seat = seatList[i];\r\n      } else {\r\n        console.warn(`Nicht genügend Sitzplätze in der Liste für Ticket ${i + 1}.`);\r\n        break; // Keine weiteren Sitzplätze verfügbar\r\n      }\r\n    }\r\n  },\r\n  setToken(state, token) {\r\n    state.token = token;}\r\n\r\n\r\n  },\r\n  actions: {\r\n\r\n    async fetchArrivalAirportsAutocomplete ({commit,state}){\r\n      console.log(\"Starte API-Anfrage...\");\r\n      const query = state.userInputObject.arrivalAirport.trim();\r\n      if (!query) {\r\n        console.log(\"Eingabe leer, Anfrage abgebrochen.\");\r\n        return;\r\n      }\r\n      try {\r\n        let url = state.urlObject.autocompleteUrl + state.userInputObject.arrivalAirport\r\n        const response = await fetch(url\r\n          ,\r\n          {\r\n            method: \"GET\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          }\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP-Fehler! Status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        commit('setArrivalAirportsAutocomplete', data);\r\n        console.log(state.userInputObject)\r\n\r\n      } catch (error) {\r\n        console.error(\"Fehler bei der API-Anfrage:\", error);\r\n      }\r\n    },\r\n\r\n    /**a\r\n     * Asynchrone Action, die Flugdaten von einer API abruft und im Vuex-Store speichert.\r\n     * @throws {Error} Gibt Fehler in der Konsole aus, falls die Anfrage oder Antwort fehlschlägt.\r\n     * @description\r\n     * Diese Methode ruft Flugdaten von der API (https://jsonplaceholder.typicode.com/posts) ab, \r\n     * überprüft das Format der Antwort und speichert die Daten im Vuex-Store. \r\n     * Bei Fehlern wird eine Fehlermeldung in der Konsole angezeigt.\r\n     */\r\n    async fetchAviationData({ commit,state }) {\r\n      try {\r\n        /** \r\n        const response = await fetch(state.urlObject.aviationStackUrl);\r\n      */\r\n        console.log(state.userInputObject)\r\n        console.log(\"hallo\")\r\n\r\n        const response = await axios.get(\r\n          \"https://api.aviationstack.com/v1/flights\",\r\n          {\r\n            params: {\r\n              access_key: \"b4a0acc6168e874cc4b1e80e105d4f82\",\r\n              dep_iata: state.userInputObject.departureIata, \r\n              arr_iata: state.userInputObject.arrivalIata\r\n            },\r\n          }\r\n        );\r\n      \r\n        console.log(\"anfrage geschikct\")\r\n        console.log(response)\r\n\r\n        const data = response.data.data\r\n        console.log(data)\r\n\r\n        // Überprüfen, ob die API-Daten erfolgreich abgerufen wurden\r\n        if (data) {\r\n          console.log(\"Api Call erfolgreich\", data);\r\n          commit('setAviationData', data);\r\n          console.log(state.userInputObject)\r\n          console.log(\"Flight API DATA .data :\"+response.data)\r\n\r\n          console.log(\"Flight API DATA :\"+state.flightAPIcallData)\r\n          \r\n\r\n        } else {\r\n          console.error('Fehlerhafte API-Antwort:', data);\r\n        }\r\n      } catch (error) {\r\n        console.error('Fehler bei der API-Anfrage:', error);\r\n      }\r\n    },\r\n    async fetchDepartureAirportsAutocomplete ({commit,state}){\r\n      console.log(\"Starte API-Anfrage...\");\r\n      const query = state.userInputObject.departureAirport.trim();\r\n      if (!query) {\r\n        console.log(\"Eingabe leer, Anfrage abgebrochen.\");\r\n        return;\r\n      }\r\n      try {\r\n        let url = state.urlObject.autocompleteUrl + state.userInputObject.departureAirport\r\n        const response = await fetch(url\r\n          ,\r\n          {\r\n            method: \"GET\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          }\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP-Fehler! Status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        commit('setDepartureAirportsAutocomplete', data);\r\n            \r\n      } catch (error) {\r\n        console.error(\"Fehler bei der API-Anfrage:\", error);\r\n      }\r\n    },\r\n\r\n    async loginAccount({ commit, state }, { emailUser, passwordUser }) {\r\n      try {\r\n        const url = `${state.urlObject.userUrl}/signin`;\r\n    \r\n        const requestData = {\r\n          email: emailUser,\r\n          password: passwordUser,\r\n        };\r\n    \r\n        const response = await fetch(url, {\r\n          method: \"POST\",  \r\n          headers: {\r\n            \"Content-Type\": \"application/json\",  \r\n          },\r\n          body: JSON.stringify(requestData), \r\n        });\r\n    \r\n        if (!response.ok) {\r\n          throw new Error(`HTTP-Fehler! Status: ${response.status}`);\r\n        }\r\n    \r\n        const data = await response.json();\r\n        const token = data.token;  \r\n    \r\n        commit('setToken', token); \r\n        localStorage.setItem('auth_token', token); \r\n        localStorage.setItem('email', emailUser); \r\n        commit(\"setIsLoggedInTrue\");\r\n        console.log(token)\r\n      } catch (error) {\r\n        console.error(\"Fehler bei der API-Anfrage:\", error);\r\n      }\r\n    },\r\n\r\n    async updateAccount({ commit, state }) {\r\n      try {\r\n        const request = {\r\n          user:state.user,\r\n          token: localStorage.getItem(\"auth_token\"),\r\n        }\r\n        console.log(request)\r\n        const url = `${state.urlObject.userUrl}/users`;\r\n        const response = await fetch(url, {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n             Authorization: `Bearer ${request.token}`\r\n          },\r\n          body: JSON.stringify(request),  // Die Benutzerdaten als JSON im Request-Body übermitteln\r\n        });\r\n    \r\n        if (!response.ok) {\r\n          throw new Error(`HTTP-Fehler! Status: ${response.status}`);\r\n        }\r\n    \r\n        const data = await response.json();\r\n        commit('setUser', data);  // Die Antwort von der API wird in den Store gespeichert\r\n      } catch (error) {\r\n        console.error(\"Fehler bei der API-Anfrage:\", error);\r\n      }\r\n    },\r\n\r\n    async createAccount({ commit, state }){\r\n      try {\r\n        const url = `${state.urlObject.userUrl}/signup`;\r\n        const user = state.registrationObject\r\n        console.log(url)\r\n        const response = await fetch(url, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({user}),  // Die Benutzerdaten als JSON im Request-Body übermitteln\r\n        });\r\n    \r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP-Fehler! Status: ${response.status}`);\r\n        }\r\n    \r\n        const data = await response.json();\r\n        commit('setUser', data.user);  // Die Antwort von der API wird in den Store gespeichert\r\n      } catch (error) {\r\n        console.error(\"Fehler bei der API-Anfrage:\", error);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n    \r\n    \r\n\r\n  ,\r\n  modules: {\r\n  }\r\n})\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}